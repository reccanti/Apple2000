// /**
//  * This file is where we set up our more complex components,
//  * things that require
//  */
@use 'globals';

/**
 * The Wrapper component wraps all of our content and applies a border
 * around it, so it looks like the screen is being framed
 */
$wrapperBorder: 1rem;
$wrappedHeight: calc(100vh - 2 * #{$wrapperBorder});
.Wrapper {
	border: $wrapperBorder solid var(--text-color);
	background-color: var(--background-color);
	overflow-y: scroll;
	height: 100vh;
	margin: 0;

	&-inner {
		max-width: 1200px;
		width: 100%;
		margin: 0 auto;
		padding: 1rem;
	}
}

/**
 * The Box component can be used to wrap content. Useful for things like menus or asides
 */
.Box {
	background-color: var(--background-color);
	border: globals.$borderSize * 3 double var(--text-color);

	&-inner {
		// padding: calc(0.5rem + #{globals.$borderSize}) 0.5rem;
		padding: var(--spacing2);
	}
}

/*
 * A fancy header for use in a Box
 */
.Header {
	background-color: var(--text-color);
	border-bottom: globals.$borderSize solid var(--text-color);
	display: grid;
	grid-template-columns: 1fr minmax(min-content, max-content) 1fr;
	grid-template-rows: [row] auto;
	overflow: hidden;

	&::before {
		content: "";

		grid-row: row;
		grid-column: 1 / span 3;

		@include globals.CheckeredPattern;
	}

	&-inner {
		grid-row: row;
		grid-column: 2 / span 1;

		display: flex;
		align-items: center;

		font-family: var(--font-family-header);
		font-size: var(--font-size-header5);
		padding: 0 1rem;
		background-color: var(--text-color);
		color: var(--background-color);
		z-index: 1;
	}

	&-buttons {
		grid-row: row;
		grid-column: 3 / span 1;
		justify-self: end;
		z-index: 1;
	}
}

/**
 * The Menu appears in the upper-right corner of the screen and
 */
.Menu {
	$root: &;
	z-index: 10;
	position: fixed;
	right: 0;
	margin: calc(#{$wrapperBorder} + 1rem);

	// toggle the appearance of the menu on and off

	&--close {
		#{$root}-contents {
			display: none;
		}

		#{$root}-toggle {
			display: block;
		}
	}

	&--open {
		width: calc(100% - (2 * #{$wrapperBorder}) - (2 * 1rem));
		max-width: 600px;

		#{$root}-contents {
			display: block;
		}

		#{$root}-toggle {
			display: none;
		}
	}
}

/**
 * The Splash component defines a fancy, full-page splash screen
 */
.Splash {
	display: flex;
	flex-direction: column;
	text-align: center;
	justify-content: center;
	align-items: center;
	height: $wrappedHeight;
}

/**
 * The Icon component is a bunch of rules for styling Icons and
 * making sure they're themed correctly
 */
.Icon {
	height: 2rem;
	width: 2rem;
	display: block;

	svg {
		display: block;
	}

	path,
	rect {
		fill: var(--text-color);

		button:hover &,
		button:focus &,
		.button:hover &,
		.button:focus & {
			fill: var(--background-color);
		}
	}
}

/**
 * The Button Group is a collection of buttons that are spaced
 * appropriately
 */
.ButtonGroup {
	display: inline-flex;
	gap: globals.$borderSize;
	flex-wrap: wrap;
	justify-content: center;

	&--nowrap {
		flex-wrap: nowrap;
	}
}

/**
 * You've seen links, but you've never seen
 * my fancy links âœ¨
 */

.LinkGrid {
	list-style: none;
	display: grid;
	grid-auto-flow: dense;
	grid-template-columns: repeat(1, 1fr);
	grid-auto-rows: 1fr;

	position: relative;
	padding: var(--spacing1);

	&::before {
		content: "";

		display: block;
		width: 100%;
		height: 100%;
		top: 0;
		position: absolute;

		@include globals.CheckeredPattern(var(--text-color));
	}

	/**
   * @TODO - Not sold on these sizes
   * ~reccanti 4/10/2021
   */
	@media (min-width: globals.$bp-large) {
		grid-template-columns: repeat(3, 1fr);
	}
}

.LinkGridItem {
	$root: &;
	display: flex;
	margin: 0 !important; /* Bleh */
	position: relative;

	&-preview {
		width: 100%;

		flex: 0 0 auto;
		filter: grayscale(1) brightness(0.5);
	}

	&-linkWrapper {
		display: flex;
		width: 100%;
		align-items: center;

		&:hover,
		&:focus {
			outline: none;

			&:before {
				content: "";
				pointer-events: none;

				position: absolute;
				width: 100%;
				height: 100%;
			}

			#{$root}-preview {
				filter: none;
			}

			/**
       * These effects are a little jarring. Maybe use some
       * sort of "wipe" effect?
       */
			& #{$root}-description {
				opacity: 1;
			}
		}

		&:hover {
			&:before {
				box-shadow: inset 0 0 0 #{3 * globals.$borderSize} var(--text-color);
			}
		}

		&:focus {
			&:before {
				box-shadow: inset 0 0 0 globals.$borderSize var(--text-color),
					inset 0 0 0 #{2 * globals.$borderSize} var(--background-color),
					inset 0 0 0 #{3 * globals.$borderSize} var(--text-color);
			}
		}
	}

	&-description {
		display: inline-block;
		position: absolute;
		margin: globals.$borderSize * 5;
		padding: var(--spacing1);
		text-align: center;
		border: globals.$borderSize solid var(--background-color);
		font-family: var(--font-family-header);
		font-size: var(--font-size-header5);
		line-height: 0.8;
		opacity: 0;
		top: 0; /* Fixes a weird safari bug where the text was being shifted down :shrug: */
		background-color: var(--text-color);
		color: var(--background-color);

		// &:after {
		// 	content: "";
		// 	position: absolute;
		// 	display: block;
		// 	width: calc(100% + #{globals.$borderSize * 4});
		// 	height: calc(100% + #{globals.$borderSize * 4});
		// 	top: -1 * 2 * globals.$borderSize;
		// 	left: -1 * 2 * globals.$borderSize;

		// 	@include globals.CheckeredPattern(var(--text-color));
		// }
	}

	@media (min-width: globals.$bp-large) {
		#{$root}-description {
			font-size: var(--font-size-header5);
		}
	}

	&--recent {
		@media (min-width: globals.$bp-large) {
			grid-column: span 2;
			grid-row: span 2;
			#{$root}-description {
				font-size: var(--font-size-header5);
			}
		}
	}
}

/**
* Tag, you're it!
*/
.Tag {
	all: unset;
	margin: 0 !important; /* Bleh */
	font-size: var(--tag-font-size);
	font-family: var(--font-family-header);
}

.TagList {
	display: flex;
	flex-wrap: wrap;

	& > .Tag:not(:first-child)::before {
		content: "|";
		margin: 0 var(--spacing1);
	}
}

// /**
// * Comics!!!
// */

// .Comic {
// 	&-image {
// 		width: 100%;
// 	}

// 	&-nav {
// 		display: flex;

// 		> * {
// 			flex: 1;
// 		}
// 	}
// }
